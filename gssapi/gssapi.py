# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _gssapi
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class Name(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Name, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Name, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ptr"] = _gssapi.Name_ptr_set
    __swig_getmethods__["ptr"] = _gssapi.Name_ptr_get
    if _newclass:ptr = _swig_property(_gssapi.Name_ptr_get, _gssapi.Name_ptr_set)
    __swig_setmethods__["oid"] = _gssapi.Name_oid_set
    __swig_getmethods__["oid"] = _gssapi.Name_oid_get
    if _newclass:oid = _swig_property(_gssapi.Name_oid_get, _gssapi.Name_oid_set)
    def __init__(self, *args): 
        this = _gssapi.new_Name(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gssapi.delete_Name
    __del__ = lambda self : None;
    __swig_setmethods__["name"] = _gssapi.Name_name_set
    __swig_getmethods__["name"] = _gssapi.Name_name_get
    if _newclass:name = _swig_property(_gssapi.Name_name_get, _gssapi.Name_name_set)
Name_swigregister = _gssapi.Name_swigregister
Name_swigregister(Name)

class Credential(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Credential, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Credential, name)
    __repr__ = _swig_repr
    __swig_getmethods__["handle"] = _gssapi.Credential_handle_get
    if _newclass:handle = _swig_property(_gssapi.Credential_handle_get)
    __swig_getmethods__["lifetime"] = _gssapi.Credential_lifetime_get
    if _newclass:lifetime = _swig_property(_gssapi.Credential_lifetime_get)
    __swig_getmethods__["usage"] = _gssapi.Credential_usage_get
    if _newclass:usage = _swig_property(_gssapi.Credential_usage_get)
    __swig_getmethods__["name"] = _gssapi.Credential_name_get
    if _newclass:name = _swig_property(_gssapi.Credential_name_get)
    def __init__(self, *args): 
        this = _gssapi.new_Credential(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gssapi.delete_Credential
    __del__ = lambda self : None;
    __swig_getmethods__["mechs"] = _gssapi.Credential_mechs_get
    if _newclass:mechs = _swig_property(_gssapi.Credential_mechs_get)
Credential_swigregister = _gssapi.Credential_swigregister
Credential_swigregister(Credential)

class Context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Context, name)
    __repr__ = _swig_repr
    __swig_getmethods__["handle"] = _gssapi.Context_handle_get
    if _newclass:handle = _swig_property(_gssapi.Context_handle_get)
    __swig_getmethods__["mech"] = _gssapi.Context_mech_get
    if _newclass:mech = _swig_property(_gssapi.Context_mech_get)
    __swig_getmethods__["flags"] = _gssapi.Context_flags_get
    if _newclass:flags = _swig_property(_gssapi.Context_flags_get)
    __swig_getmethods__["lifetime"] = _gssapi.Context_lifetime_get
    if _newclass:lifetime = _swig_property(_gssapi.Context_lifetime_get)
    __swig_getmethods__["source_name"] = _gssapi.Context_source_name_get
    if _newclass:source_name = _swig_property(_gssapi.Context_source_name_get)
    __swig_getmethods__["target_name"] = _gssapi.Context_target_name_get
    if _newclass:target_name = _swig_property(_gssapi.Context_target_name_get)
    __swig_getmethods__["open"] = _gssapi.Context_open_get
    if _newclass:open = _swig_property(_gssapi.Context_open_get)
    def __init__(self, *args): 
        this = _gssapi.new_Context(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gssapi.delete_Context
    __del__ = lambda self : None;
    def init(*args): return _gssapi.Context_init(*args)
    def accept(*args): return _gssapi.Context_accept(*args)
    def getMIC(*args): return _gssapi.Context_getMIC(*args)
    def verifyMIC(*args): return _gssapi.Context_verifyMIC(*args)
    def wrap(*args): return _gssapi.Context_wrap(*args)
    def unwrap(*args): return _gssapi.Context_unwrap(*args)
Context_swigregister = _gssapi.Context_swigregister
Context_swigregister(Context)

ptr2str = _gssapi.ptr2str
class _ReturnValue(object):
    """Used to convert a dict into class attributes"""
    def __init__(self, d):
        self.__dict__ = d

gss_major_codes = {
    0x00000000L : 'GSS_S_COMPLETE',
    0x00000001L : 'GSS_S_CONTINUE_NEEDED',
    0x00000002L : 'GSS_S_DUPLICATE_TOKEN',
    0x00000004L : 'GSS_S_OLD_TOKEN',
    0x00000008L : 'GSS_S_UNSEQ_TOKEN',
    0x00000010L : 'GSS_S_GAP_TOKEN',
    0x00010000L : 'GSS_S_BAD_MECH',
    0x00020000L : 'GSS_S_BAD_NAME',
    0x00030000L : 'GSS_S_BAD_NAMETYPE',
    0x00040000L : 'GSS_S_BAD_BINDINGS',
    0x00050000L : 'GSS_S_BAD_STATUS',
    0x00060000L : 'GSS_S_BAD_MIC',
    0x00060000L : 'GSS_S_BAD_SIG',
    0x00070000L : 'GSS_S_NO_CRED',
    0x00080000L : 'GSS_S_NO_CONTEXT',
    0x00090000L : 'GSS_S_DEFECTIVE_TOKEN',
    0x000a0000L : 'GSS_S_DEFECTIVE_CREDENTIAL',
    0x000b0000L : 'GSS_S_CREDENTIALS_EXPIRED',
    0x000c0000L : 'GSS_S_CONTEXT_EXPIRED',
    0x000d0000L : 'GSS_S_FAILURE',
    0x000e0000L : 'GSS_S_BAD_QOP',
    0x000f0000L : 'GSS_S_UNAUTHORIZED',
    0x00100000L : 'GSS_S_UNAVAILABLE',
    0x00110000L : 'GSS_S_DUPLICATE_ELEMENT',
    0x00120000L : 'GSS_S_NAME_NOT_MN',
    0x01000000L : 'GSS_S_CALL_INACCESSIBLE_READ',
    0x02000000L : 'GSS_S_CALL_INACCESSIBLE_WRITE',
    0x03000000L : 'GSS_S_CALL_BAD_STRUCTURE',
}

def show_major(m):
    """Return string corresponding to major code"""
    if m == 0:
        return gss_major_codes[0]
    call = m & 0xff000000L
    routine = m & 0xff0000
    supp = m & 0xffff
    out = []
    if call:
        out.append(gss_major_codes[call])
    if routine:
        out.append(gss_major_codes[routine])
    if supp:
        out.append(gss_major_codes[supp])
    return ' | '.join(out)

class Error(Exception):
    def __init__(self, major, minor):
        self.major = major
	self.minor = minor
	self.name = show_major(major)

    def __repr__(self):
	return "gssapi.Error(major=%s, minor=%i)" % (self.name, self.minor)

GSS_S_COMPLETE = _gssapi.GSS_S_COMPLETE
GSS_S_CONTINUE_NEEDED = _gssapi.GSS_S_CONTINUE_NEEDED
DELEG_FLAG = _gssapi.DELEG_FLAG
MUTUAL_FLAG = _gssapi.MUTUAL_FLAG
REPLAY_FLAG = _gssapi.REPLAY_FLAG
SEQUENCE_FLAG = _gssapi.SEQUENCE_FLAG
CONF_FLAG = _gssapi.CONF_FLAG
INTEG_FLAG = _gssapi.INTEG_FLAG
ANON_FLAG = _gssapi.ANON_FLAG
PROT_READY_FLAG = _gssapi.PROT_READY_FLAG
TRANS_FLAG = _gssapi.TRANS_FLAG
BOTH = _gssapi.BOTH
INITIATE = _gssapi.INITIATE
ACCEPT = _gssapi.ACCEPT

def importName(*args):
  """importName(string name, gss_OID name_type=HOSTBASED_SERVICE) -> name"""
  val = _gssapi.importName(*args)
  
  val = _ReturnValue(val)
  # STUB - raise error when major bad
  if val.major != GSS_S_COMPLETE and val.major != GSS_S_CONTINUE_NEEDED:
    raise Error(val.major, val.minor)

  return val

def initSecContext(*args):
  """initSecContext(gss_name_t name, gss_ctx_id_t *context=None, string token=None, gss_cred_id_t cred=None, gss_OID mech=krb5oid, int flags=0, int time=0, gss_channel_bindings_t chan=None) -> context, mech, token, flags, time"""
  val = _gssapi.initSecContext(*args)
  
  val = _ReturnValue(val)
  # STUB - raise error when major bad
  if val.major != GSS_S_COMPLETE and val.major != GSS_S_CONTINUE_NEEDED:
    raise Error(val.major, val.minor)

  return val

def acceptSecContext(*args):
  """
    acceptSecContext(OM_uint32 minor, gss_buffer_t in_token, gss_ctx_id_t context=None, 
        gss_cred_id_t in_cred=None, gss_channel_bindings_t chan=None, 
        gss_name_t name, 
        gss_OID mech, gss_buffer_t token, OM_uint32 flags, 
        OM_uint32 time, gss_cred_id_t cred) -> OM_uint32
    """
  val = _gssapi.acceptSecContext(*args)
  
  val = _ReturnValue(val)
  # STUB - raise error when major bad
  if val.major != GSS_S_COMPLETE and val.major != GSS_S_CONTINUE_NEEDED:
    raise Error(val.major, val.minor)

  return val

def getMIC(*args):
  """getMIC(gss_ctx_id_t context, string msg, int qop) -> string checksum"""
  val = _gssapi.getMIC(*args)
  
  val = _ReturnValue(val)
  # STUB - raise error when major bad
  if val.major != GSS_S_COMPLETE and val.major != GSS_S_CONTINUE_NEEDED:
    raise Error(val.major, val.minor)

  return val

def verifyMIC(*args):
  """verifyMIC(gss_ctx_id_t context, string msg, string checksum) -> qop"""
  val = _gssapi.verifyMIC(*args)
  
  val = _ReturnValue(val)
  # STUB - raise error when major bad
  if val.major != GSS_S_COMPLETE and val.major != GSS_S_CONTINUE_NEEDED:
    raise Error(val.major, val.minor)

  return val

def wrap(*args):
  """
    wrap(minor, INPUT, conf_req, in_msg, qop=0, confidential, 
        msg) -> OM_uint32
    """
  val = _gssapi.wrap(*args)
  
  val = _ReturnValue(val)
  # STUB - raise error when major bad
  if val.major != GSS_S_COMPLETE and val.major != GSS_S_CONTINUE_NEEDED:
    raise Error(val.major, val.minor)

  return val

def unwrap(*args):
  """unwrap(minor, INPUT, INPUT, msg, confidential, qop) -> OM_uint32"""
  val = _gssapi.unwrap(*args)
  
  val = _ReturnValue(val)
  # STUB - raise error when major bad
  if val.major != GSS_S_COMPLETE and val.major != GSS_S_CONTINUE_NEEDED:
    raise Error(val.major, val.minor)

  return val

def inquireContext(*args):
  """
    inquireContext(minor, ctx, source, target, time, mech, flags, initiated, 
        open) -> OM_uint32
    """
  val = _gssapi.inquireContext(*args)
  
  val = _ReturnValue(val)
  # STUB - raise error when major bad
  if val.major != GSS_S_COMPLETE and val.major != GSS_S_CONTINUE_NEEDED:
    raise Error(val.major, val.minor)

  return val

def displayName(*args):
  """displayName(minor, name, name, name_type) -> OM_uint32"""
  val = _gssapi.displayName(*args)
  
  val = _ReturnValue(val)
  # STUB - raise error when major bad
  if val.major != GSS_S_COMPLETE and val.major != GSS_S_CONTINUE_NEEDED:
    raise Error(val.major, val.minor)

  return val

def exportName(*args):
  """exportName(minor, name, name) -> OM_uint32"""
  val = _gssapi.exportName(*args)
  
  val = _ReturnValue(val)
  # STUB - raise error when major bad
  if val.major != GSS_S_COMPLETE and val.major != GSS_S_CONTINUE_NEEDED:
    raise Error(val.major, val.minor)

  return val

def inquireCred(*args):
  """inquireCred(minor, cred, name, lifetime, usage, mechs) -> OM_uint32"""
  val = _gssapi.inquireCred(*args)
  
  val = _ReturnValue(val)
  # STUB - raise error when major bad
  if val.major != GSS_S_COMPLETE and val.major != GSS_S_CONTINUE_NEEDED:
    raise Error(val.major, val.minor)

  return val

def acquireCred(*args):
  """
    acquireCred(minor, name, lifetime, mechs=None, usage=0, cred, mechs, 
        lifetime) -> OM_uint32
    """
  val = _gssapi.acquireCred(*args)
  
  val = _ReturnValue(val)
  # STUB - raise error when major bad
  if val.major != GSS_S_COMPLETE and val.major != GSS_S_CONTINUE_NEEDED:
    raise Error(val.major, val.minor)

  return val

def oid2str(*args):
  """oid2str(minor, oid, str) -> OM_uint32"""
  val = _gssapi.oid2str(*args)
  
  val = _ReturnValue(val)
  # STUB - raise error when major bad
  if val.major != GSS_S_COMPLETE and val.major != GSS_S_CONTINUE_NEEDED:
    raise Error(val.major, val.minor)

  return val

cvar = _gssapi.cvar
NT_HOSTBASED_SERVICE = cvar.NT_HOSTBASED_SERVICE
NT_USER_NAME = cvar.NT_USER_NAME
krb5oid = cvar.krb5oid

